//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"cloud.google.com/go/firestore"
	kedav1alpha1 "github.com/kedacore/keda/v2/apis/keda/v1alpha1"
	"k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AWSDynamoDB) DeepCopyInto(out *AWSDynamoDB) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RoleARN != nil {
		in, out := &in.RoleARN, &out.RoleARN
		*out = new(string)
		**out = **in
	}
	if in.AuthRoleARN != nil {
		in, out := &in.AuthRoleARN, &out.AuthRoleARN
		*out = new(string)
		**out = **in
	}
	if in.Table != nil {
		in, out := &in.Table, &out.Table
		*out = new(string)
		**out = **in
	}
	if in.RetrieveQuery != nil {
		in, out := &in.RetrieveQuery, &out.RetrieveQuery
		*out = new(string)
		**out = **in
	}
	if in.ClearQuery != nil {
		in, out := &in.ClearQuery, &out.ClearQuery
		*out = new(string)
		**out = **in
	}
	if in.FailQuery != nil {
		in, out := &in.FailQuery, &out.FailQuery
		*out = new(string)
		**out = **in
	}
	if in.IncludeNextToken != nil {
		in, out := &in.IncludeNextToken, &out.IncludeNextToken
		*out = new(bool)
		**out = **in
	}
	if in.Limit != nil {
		in, out := &in.Limit, &out.Limit
		*out = new(int64)
		**out = **in
	}
	if in.NextToken != nil {
		in, out := &in.NextToken, &out.NextToken
		*out = new(string)
		**out = **in
	}
	if in.RetrieveField != nil {
		in, out := &in.RetrieveField, &out.RetrieveField
		*out = new(string)
		**out = **in
	}
	if in.UnmarshalJSON != nil {
		in, out := &in.UnmarshalJSON, &out.UnmarshalJSON
		*out = new(bool)
		**out = **in
	}
	if in.AccessKeySecretName != nil {
		in, out := &in.AccessKeySecretName, &out.AccessKeySecretName
		*out = new(string)
		**out = **in
	}
	if in.IdentityOwner != nil {
		in, out := &in.IdentityOwner, &out.IdentityOwner
		*out = new(string)
		**out = **in
	}
	if in.PodIdentityProvider != nil {
		in, out := &in.PodIdentityProvider, &out.PodIdentityProvider
		*out = new(string)
		**out = **in
	}
	if in.ScaleTargetValue != nil {
		in, out := &in.ScaleTargetValue, &out.ScaleTargetValue
		*out = new(string)
		**out = **in
	}
	if in.ScaleExpressionAttributeNames != nil {
		in, out := &in.ScaleExpressionAttributeNames, &out.ScaleExpressionAttributeNames
		*out = new(string)
		**out = **in
	}
	if in.ScaleKeyConditionExpression != nil {
		in, out := &in.ScaleKeyConditionExpression, &out.ScaleKeyConditionExpression
		*out = new(string)
		**out = **in
	}
	if in.ScaleExpressionAttributeValues != nil {
		in, out := &in.ScaleExpressionAttributeValues, &out.ScaleExpressionAttributeValues
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AWSDynamoDB.
func (in *AWSDynamoDB) DeepCopy() *AWSDynamoDB {
	if in == nil {
		return nil
	}
	out := new(AWSDynamoDB)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AWSS3) DeepCopyInto(out *AWSS3) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RoleARN != nil {
		in, out := &in.RoleARN, &out.RoleARN
		*out = new(string)
		**out = **in
	}
	if in.AuthRoleARN != nil {
		in, out := &in.AuthRoleARN, &out.AuthRoleARN
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.KeyRegex != nil {
		in, out := &in.KeyRegex, &out.KeyRegex
		*out = new(string)
		**out = **in
	}
	if in.KeyPrefix != nil {
		in, out := &in.KeyPrefix, &out.KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.ClearOp != nil {
		in, out := &in.ClearOp, &out.ClearOp
		*out = new(AWSS3Op)
		(*in).DeepCopyInto(*out)
	}
	if in.FailOp != nil {
		in, out := &in.FailOp, &out.FailOp
		*out = new(AWSS3Op)
		(*in).DeepCopyInto(*out)
	}
	if in.AccessKeySecretName != nil {
		in, out := &in.AccessKeySecretName, &out.AccessKeySecretName
		*out = new(string)
		**out = **in
	}
	if in.IdentityOwner != nil {
		in, out := &in.IdentityOwner, &out.IdentityOwner
		*out = new(string)
		**out = **in
	}
	if in.PodIdentityProvider != nil {
		in, out := &in.PodIdentityProvider, &out.PodIdentityProvider
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AWSS3.
func (in *AWSS3) DeepCopy() *AWSS3 {
	if in == nil {
		return nil
	}
	out := new(AWSS3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AWSS3Op) DeepCopyInto(out *AWSS3Op) {
	*out = *in
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.KeyTemplate != nil {
		in, out := &in.KeyTemplate, &out.KeyTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AWSS3Op.
func (in *AWSS3Op) DeepCopy() *AWSS3Op {
	if in == nil {
		return nil
	}
	out := new(AWSS3Op)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AWSSQS) DeepCopyInto(out *AWSSQS) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.QueueURL != nil {
		in, out := &in.QueueURL, &out.QueueURL
		*out = new(string)
		**out = **in
	}
	if in.RoleARN != nil {
		in, out := &in.RoleARN, &out.RoleARN
		*out = new(string)
		**out = **in
	}
	if in.AuthRoleARN != nil {
		in, out := &in.AuthRoleARN, &out.AuthRoleARN
		*out = new(string)
		**out = **in
	}
	if in.AccessKeySecretName != nil {
		in, out := &in.AccessKeySecretName, &out.AccessKeySecretName
		*out = new(string)
		**out = **in
	}
	if in.QueueLength != nil {
		in, out := &in.QueueLength, &out.QueueLength
		*out = new(string)
		**out = **in
	}
	if in.IdentityOwner != nil {
		in, out := &in.IdentityOwner, &out.IdentityOwner
		*out = new(string)
		**out = **in
	}
	if in.PodIdentityProvider != nil {
		in, out := &in.PodIdentityProvider, &out.PodIdentityProvider
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AWSSQS.
func (in *AWSSQS) DeepCopy() *AWSSQS {
	if in == nil {
		return nil
	}
	out := new(AWSSQS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActiveMQ) DeepCopyInto(out *ActiveMQ) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLSInsecure != nil {
		in, out := &in.TLSInsecure, &out.TLSInsecure
		*out = new(bool)
		**out = **in
	}
	if in.TLSCert != nil {
		in, out := &in.TLSCert, &out.TLSCert
		*out = new(string)
		**out = **in
	}
	if in.TLSKey != nil {
		in, out := &in.TLSKey, &out.TLSKey
		*out = new(string)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActiveMQ.
func (in *ActiveMQ) DeepCopy() *ActiveMQ {
	if in == nil {
		return nil
	}
	out := new(ActiveMQ)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Cassandra) DeepCopyInto(out *Cassandra) {
	*out = *in
	if in.Hosts != nil {
		in, out := &in.Hosts, &out.Hosts
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.RetrieveField != nil {
		in, out := &in.RetrieveField, &out.RetrieveField
		*out = new(string)
		**out = **in
	}
	if in.RetrieveQuery != nil {
		in, out := &in.RetrieveQuery, &out.RetrieveQuery
		*out = new(SqlQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.FailureQuery != nil {
		in, out := &in.FailureQuery, &out.FailureQuery
		*out = new(SqlQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.ClearQuery != nil {
		in, out := &in.ClearQuery, &out.ClearQuery
		*out = new(SqlQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.ScaleQuery != nil {
		in, out := &in.ScaleQuery, &out.ScaleQuery
		*out = new(string)
		**out = **in
	}
	if in.TargetQueryValue != nil {
		in, out := &in.TargetQueryValue, &out.TargetQueryValue
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Cassandra.
func (in *Cassandra) DeepCopy() *Cassandra {
	if in == nil {
		return nil
	}
	out := new(Cassandra)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Centauri) DeepCopyInto(out *Centauri) {
	*out = *in
	if in.PrivateKey != nil {
		in, out := &in.PrivateKey, &out.PrivateKey
		*out = new([]byte)
		if **in != nil {
			in, out := *in, *out
			*out = make([]byte, len(*in))
			copy(*out, *in)
		}
	}
	if in.PrivateKeySecretName != nil {
		in, out := &in.PrivateKeySecretName, &out.PrivateKeySecretName
		*out = new(string)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.Channel != nil {
		in, out := &in.Channel, &out.Channel
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Centauri.
func (in *Centauri) DeepCopy() *Centauri {
	if in == nil {
		return nil
	}
	out := new(Centauri)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeployStatus) DeepCopyInto(out *DeployStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeployStatus.
func (in *DeployStatus) DeepCopy() *DeployStatus {
	if in == nil {
		return nil
	}
	out := new(DeployStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Elasticsearch) DeepCopyInto(out *Elasticsearch) {
	*out = *in
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.RetrieveSearchTemplate != nil {
		in, out := &in.RetrieveSearchTemplate, &out.RetrieveSearchTemplate
		*out = new(string)
		**out = **in
	}
	if in.RetrieveSearchParams != nil {
		in, out := &in.RetrieveSearchParams, &out.RetrieveSearchParams
		*out = new(string)
		**out = **in
	}
	if in.RetrieveSearchValueLocation != nil {
		in, out := &in.RetrieveSearchValueLocation, &out.RetrieveSearchValueLocation
		*out = new(string)
		**out = **in
	}
	if in.RetrieveSearchTargetValue != nil {
		in, out := &in.RetrieveSearchTargetValue, &out.RetrieveSearchTargetValue
		*out = new(string)
		**out = **in
	}
	if in.RetrieveSearchActivationTargetValue != nil {
		in, out := &in.RetrieveSearchActivationTargetValue, &out.RetrieveSearchActivationTargetValue
		*out = new(string)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLSInsecure != nil {
		in, out := &in.TLSInsecure, &out.TLSInsecure
		*out = new(bool)
		**out = **in
	}
	if in.TLSCert != nil {
		in, out := &in.TLSCert, &out.TLSCert
		*out = new(string)
		**out = **in
	}
	if in.TLSKey != nil {
		in, out := &in.TLSKey, &out.TLSKey
		*out = new(string)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.RetrieveIndex != nil {
		in, out := &in.RetrieveIndex, &out.RetrieveIndex
		*out = new(string)
		**out = **in
	}
	if in.RetrieveQuery != nil {
		in, out := &in.RetrieveQuery, &out.RetrieveQuery
		*out = new(string)
		**out = **in
	}
	if in.ClearDoc != nil {
		in, out := &in.ClearDoc, &out.ClearDoc
		*out = new(string)
		**out = **in
	}
	if in.ClearIndex != nil {
		in, out := &in.ClearIndex, &out.ClearIndex
		*out = new(string)
		**out = **in
	}
	if in.ClearOp != nil {
		in, out := &in.ClearOp, &out.ClearOp
		*out = new(ElasticsearchCloseOp)
		**out = **in
	}
	if in.FailDoc != nil {
		in, out := &in.FailDoc, &out.FailDoc
		*out = new(string)
		**out = **in
	}
	if in.FailIndex != nil {
		in, out := &in.FailIndex, &out.FailIndex
		*out = new(string)
		**out = **in
	}
	if in.FailOp != nil {
		in, out := &in.FailOp, &out.FailOp
		*out = new(ElasticsearchCloseOp)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Elasticsearch.
func (in *Elasticsearch) DeepCopy() *Elasticsearch {
	if in == nil {
		return nil
	}
	out := new(Elasticsearch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FS) DeepCopyInto(out *FS) {
	*out = *in
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.KeyPrefix != nil {
		in, out := &in.KeyPrefix, &out.KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.KeyRegex != nil {
		in, out := &in.KeyRegex, &out.KeyRegex
		*out = new(string)
		**out = **in
	}
	if in.ClearOp != nil {
		in, out := &in.ClearOp, &out.ClearOp
		*out = new(NFSOp)
		(*in).DeepCopyInto(*out)
	}
	if in.FailOp != nil {
		in, out := &in.FailOp, &out.FailOp
		*out = new(NFSOp)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FS.
func (in *FS) DeepCopy() *FS {
	if in == nil {
		return nil
	}
	out := new(FS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FSOp) DeepCopyInto(out *FSOp) {
	*out = *in
	if in.Operation != nil {
		in, out := &in.Operation, &out.Operation
		*out = new(FSOperation)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.KeyTemplate != nil {
		in, out := &in.KeyTemplate, &out.KeyTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FSOp.
func (in *FSOp) DeepCopy() *FSOp {
	if in == nil {
		return nil
	}
	out := new(FSOp)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GCPBQ) DeepCopyInto(out *GCPBQ) {
	*out = *in
	if in.RetrieveField != nil {
		in, out := &in.RetrieveField, &out.RetrieveField
		*out = new(string)
		**out = **in
	}
	if in.RetrieveQuery != nil {
		in, out := &in.RetrieveQuery, &out.RetrieveQuery
		*out = new(string)
		**out = **in
	}
	if in.ClearQuery != nil {
		in, out := &in.ClearQuery, &out.ClearQuery
		*out = new(string)
		**out = **in
	}
	if in.FailQuery != nil {
		in, out := &in.FailQuery, &out.FailQuery
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GCPBQ.
func (in *GCPBQ) DeepCopy() *GCPBQ {
	if in == nil {
		return nil
	}
	out := new(GCPBQ)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GCPFirestore) DeepCopyInto(out *GCPFirestore) {
	*out = *in
	if in.RetrieveCollection != nil {
		in, out := &in.RetrieveCollection, &out.RetrieveCollection
		*out = new(string)
		**out = **in
	}
	if in.RetrieveDocument != nil {
		in, out := &in.RetrieveDocument, &out.RetrieveDocument
		*out = new(string)
		**out = **in
	}
	if in.RetrieveQuery != nil {
		in, out := &in.RetrieveQuery, &out.RetrieveQuery
		*out = new(GCPFirestoreQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.RetrieveDocumentJSONKey != nil {
		in, out := &in.RetrieveDocumentJSONKey, &out.RetrieveDocumentJSONKey
		*out = new(string)
		**out = **in
	}
	if in.ClearOp != nil {
		in, out := &in.ClearOp, &out.ClearOp
		*out = new(FirestoreOp)
		**out = **in
	}
	if in.ClearUpdate != nil {
		in, out := &in.ClearUpdate, &out.ClearUpdate
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.ClearCollection != nil {
		in, out := &in.ClearCollection, &out.ClearCollection
		*out = new(string)
		**out = **in
	}
	if in.FailOp != nil {
		in, out := &in.FailOp, &out.FailOp
		*out = new(FirestoreOp)
		**out = **in
	}
	if in.FailUpdate != nil {
		in, out := &in.FailUpdate, &out.FailUpdate
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.FailCollection != nil {
		in, out := &in.FailCollection, &out.FailCollection
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GCPFirestore.
func (in *GCPFirestore) DeepCopy() *GCPFirestore {
	if in == nil {
		return nil
	}
	out := new(GCPFirestore)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GCPFirestoreQuery) DeepCopyInto(out *GCPFirestoreQuery) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Op != nil {
		in, out := &in.Op, &out.Op
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	if in.OrderBy != nil {
		in, out := &in.OrderBy, &out.OrderBy
		*out = new(string)
		**out = **in
	}
	if in.Order != nil {
		in, out := &in.Order, &out.Order
		*out = new(firestore.Direction)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GCPFirestoreQuery.
func (in *GCPFirestoreQuery) DeepCopy() *GCPFirestoreQuery {
	if in == nil {
		return nil
	}
	out := new(GCPFirestoreQuery)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GCPGCS) DeepCopyInto(out *GCPGCS) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.KeyRegex != nil {
		in, out := &in.KeyRegex, &out.KeyRegex
		*out = new(string)
		**out = **in
	}
	if in.KeyPrefix != nil {
		in, out := &in.KeyPrefix, &out.KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.ClearOp != nil {
		in, out := &in.ClearOp, &out.ClearOp
		*out = new(GCPGCSOp)
		(*in).DeepCopyInto(*out)
	}
	if in.FailOp != nil {
		in, out := &in.FailOp, &out.FailOp
		*out = new(GCPGCSOp)
		(*in).DeepCopyInto(*out)
	}
	if in.CredentialsSecretName != nil {
		in, out := &in.CredentialsSecretName, &out.CredentialsSecretName
		*out = new(string)
		**out = **in
	}
	if in.PodIdentityProvider != nil {
		in, out := &in.PodIdentityProvider, &out.PodIdentityProvider
		*out = new(string)
		**out = **in
	}
	if in.TargetObjectCount != nil {
		in, out := &in.TargetObjectCount, &out.TargetObjectCount
		*out = new(string)
		**out = **in
	}
	if in.ActivationObjectCount != nil {
		in, out := &in.ActivationObjectCount, &out.ActivationObjectCount
		*out = new(string)
		**out = **in
	}
	if in.MaxBucketItemsToScan != nil {
		in, out := &in.MaxBucketItemsToScan, &out.MaxBucketItemsToScan
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GCPGCS.
func (in *GCPGCS) DeepCopy() *GCPGCS {
	if in == nil {
		return nil
	}
	out := new(GCPGCS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GCPGCSOp) DeepCopyInto(out *GCPGCSOp) {
	*out = *in
	if in.Operation != nil {
		in, out := &in.Operation, &out.Operation
		*out = new(GCPGCSOperation)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.KeyTemplate != nil {
		in, out := &in.KeyTemplate, &out.KeyTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GCPGCSOp.
func (in *GCPGCSOp) DeepCopy() *GCPGCSOp {
	if in == nil {
		return nil
	}
	out := new(GCPGCSOp)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GCPPubSub) DeepCopyInto(out *GCPPubSub) {
	*out = *in
	if in.CredentialsSecretName != nil {
		in, out := &in.CredentialsSecretName, &out.CredentialsSecretName
		*out = new(string)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	if in.PodIdentityProvider != nil {
		in, out := &in.PodIdentityProvider, &out.PodIdentityProvider
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GCPPubSub.
func (in *GCPPubSub) DeepCopy() *GCPPubSub {
	if in == nil {
		return nil
	}
	out := new(GCPPubSub)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTP) DeepCopyInto(out *HTTP) {
	*out = *in
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
	if in.TLSCert != nil {
		in, out := &in.TLSCert, &out.TLSCert
		*out = new(string)
		**out = **in
	}
	if in.TLSKey != nil {
		in, out := &in.TLSKey, &out.TLSKey
		*out = new(string)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.TLSInsecure != nil {
		in, out := &in.TLSInsecure, &out.TLSInsecure
		*out = new(bool)
		**out = **in
	}
	if in.RetrieveRequest != nil {
		in, out := &in.RetrieveRequest, &out.RetrieveRequest
		*out = new(RetrieveRequest)
		(*in).DeepCopyInto(*out)
	}
	if in.ClearRequest != nil {
		in, out := &in.ClearRequest, &out.ClearRequest
		*out = new(HTTPRequest)
		(*in).DeepCopyInto(*out)
	}
	if in.FailRequest != nil {
		in, out := &in.FailRequest, &out.FailRequest
		*out = new(HTTPRequest)
		(*in).DeepCopyInto(*out)
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTP.
func (in *HTTP) DeepCopy() *HTTP {
	if in == nil {
		return nil
	}
	out := new(HTTP)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPRequest) DeepCopyInto(out *HTTPRequest) {
	*out = *in
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.ContentType != nil {
		in, out := &in.ContentType, &out.ContentType
		*out = new(string)
		**out = **in
	}
	if in.SuccessfulStatusCodes != nil {
		in, out := &in.SuccessfulStatusCodes, &out.SuccessfulStatusCodes
		*out = new([]int)
		if **in != nil {
			in, out := *in, *out
			*out = make([]int, len(*in))
			copy(*out, *in)
		}
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPRequest.
func (in *HTTPRequest) DeepCopy() *HTTPRequest {
	if in == nil {
		return nil
	}
	out := new(HTTPRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Kafka) DeepCopyInto(out *Kafka) {
	*out = *in
	if in.Brokers != nil {
		in, out := &in.Brokers, &out.Brokers
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLSInsecure != nil {
		in, out := &in.TLSInsecure, &out.TLSInsecure
		*out = new(bool)
		**out = **in
	}
	if in.TLSCert != nil {
		in, out := &in.TLSCert, &out.TLSCert
		*out = new(string)
		**out = **in
	}
	if in.TLSKey != nil {
		in, out := &in.TLSKey, &out.TLSKey
		*out = new(string)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
	if in.EnableSASL != nil {
		in, out := &in.EnableSASL, &out.EnableSASL
		*out = new(bool)
		**out = **in
	}
	if in.SaslType != nil {
		in, out := &in.SaslType, &out.SaslType
		*out = new(KafkaSaslType)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.LagThreshold != nil {
		in, out := &in.LagThreshold, &out.LagThreshold
		*out = new(string)
		**out = **in
	}
	if in.ActivationThreshold != nil {
		in, out := &in.ActivationThreshold, &out.ActivationThreshold
		*out = new(string)
		**out = **in
	}
	if in.OffsetResetPolicy != nil {
		in, out := &in.OffsetResetPolicy, &out.OffsetResetPolicy
		*out = new(string)
		**out = **in
	}
	if in.AllowIdleConsumers != nil {
		in, out := &in.AllowIdleConsumers, &out.AllowIdleConsumers
		*out = new(bool)
		**out = **in
	}
	if in.ScaleToZeroOnInvalidOffset != nil {
		in, out := &in.ScaleToZeroOnInvalidOffset, &out.ScaleToZeroOnInvalidOffset
		*out = new(bool)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Kafka.
func (in *Kafka) DeepCopy() *Kafka {
	if in == nil {
		return nil
	}
	out := new(Kafka)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongoDB) DeepCopyInto(out *MongoDB) {
	*out = *in
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.ScaleQuery != nil {
		in, out := &in.ScaleQuery, &out.ScaleQuery
		*out = new(string)
		**out = **in
	}
	if in.QueryValue != nil {
		in, out := &in.QueryValue, &out.QueryValue
		*out = new(string)
		**out = **in
	}
	if in.RetrieveQuery != nil {
		in, out := &in.RetrieveQuery, &out.RetrieveQuery
		*out = new(string)
		**out = **in
	}
	if in.FailureQuery != nil {
		in, out := &in.FailureQuery, &out.FailureQuery
		*out = new(string)
		**out = **in
	}
	if in.ClearQuery != nil {
		in, out := &in.ClearQuery, &out.ClearQuery
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongoDB.
func (in *MongoDB) DeepCopy() *MongoDB {
	if in == nil {
		return nil
	}
	out := new(MongoDB)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQL) DeepCopyInto(out *MySQL) {
	*out = *in
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.RetrieveField != nil {
		in, out := &in.RetrieveField, &out.RetrieveField
		*out = new(string)
		**out = **in
	}
	if in.RetrieveQuery != nil {
		in, out := &in.RetrieveQuery, &out.RetrieveQuery
		*out = new(SqlQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.FailureQuery != nil {
		in, out := &in.FailureQuery, &out.FailureQuery
		*out = new(SqlQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.ClearQuery != nil {
		in, out := &in.ClearQuery, &out.ClearQuery
		*out = new(SqlQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetQueryValue != nil {
		in, out := &in.TargetQueryValue, &out.TargetQueryValue
		*out = new(int)
		**out = **in
	}
	if in.ScaleQuery != nil {
		in, out := &in.ScaleQuery, &out.ScaleQuery
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQL.
func (in *MySQL) DeepCopy() *MySQL {
	if in == nil {
		return nil
	}
	out := new(MySQL)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NATS) DeepCopyInto(out *NATS) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.Subject != nil {
		in, out := &in.Subject, &out.Subject
		*out = new(string)
		**out = **in
	}
	if in.QueueGroup != nil {
		in, out := &in.QueueGroup, &out.QueueGroup
		*out = new(string)
		**out = **in
	}
	if in.CredsFile != nil {
		in, out := &in.CredsFile, &out.CredsFile
		*out = new(string)
		**out = **in
	}
	if in.JWTFile != nil {
		in, out := &in.JWTFile, &out.JWTFile
		*out = new(string)
		**out = **in
	}
	if in.NKeyFile != nil {
		in, out := &in.NKeyFile, &out.NKeyFile
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.Token != nil {
		in, out := &in.Token, &out.Token
		*out = new(string)
		**out = **in
	}
	if in.TokenSecretName != nil {
		in, out := &in.TokenSecretName, &out.TokenSecretName
		*out = new(string)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLSInsecure != nil {
		in, out := &in.TLSInsecure, &out.TLSInsecure
		*out = new(bool)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
	if in.TLSCert != nil {
		in, out := &in.TLSCert, &out.TLSCert
		*out = new(string)
		**out = **in
	}
	if in.TLSKey != nil {
		in, out := &in.TLSKey, &out.TLSKey
		*out = new(string)
		**out = **in
	}
	if in.ClearResponse != nil {
		in, out := &in.ClearResponse, &out.ClearResponse
		*out = new(string)
		**out = **in
	}
	if in.FailResponse != nil {
		in, out := &in.FailResponse, &out.FailResponse
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NATS.
func (in *NATS) DeepCopy() *NATS {
	if in == nil {
		return nil
	}
	out := new(NATS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NFS) DeepCopyInto(out *NFS) {
	*out = *in
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.KeyPrefix != nil {
		in, out := &in.KeyPrefix, &out.KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.KeyRegex != nil {
		in, out := &in.KeyRegex, &out.KeyRegex
		*out = new(string)
		**out = **in
	}
	if in.MountPath != nil {
		in, out := &in.MountPath, &out.MountPath
		*out = new(string)
		**out = **in
	}
	if in.ClearOp != nil {
		in, out := &in.ClearOp, &out.ClearOp
		*out = new(NFSOp)
		(*in).DeepCopyInto(*out)
	}
	if in.FailOp != nil {
		in, out := &in.FailOp, &out.FailOp
		*out = new(NFSOp)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NFS.
func (in *NFS) DeepCopy() *NFS {
	if in == nil {
		return nil
	}
	out := new(NFS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NFSOp) DeepCopyInto(out *NFSOp) {
	*out = *in
	if in.Operation != nil {
		in, out := &in.Operation, &out.Operation
		*out = new(NFSOperation)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.KeyTemplate != nil {
		in, out := &in.KeyTemplate, &out.KeyTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NFSOp.
func (in *NFSOp) DeepCopy() *NFSOp {
	if in == nil {
		return nil
	}
	out := new(NFSOp)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NSQ) DeepCopyInto(out *NSQ) {
	*out = *in
	if in.NsqLookupdAddress != nil {
		in, out := &in.NsqLookupdAddress, &out.NsqLookupdAddress
		*out = new(string)
		**out = **in
	}
	if in.NsqdAddress != nil {
		in, out := &in.NsqdAddress, &out.NsqdAddress
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
	if in.Channel != nil {
		in, out := &in.Channel, &out.Channel
		*out = new(string)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLSInsecure != nil {
		in, out := &in.TLSInsecure, &out.TLSInsecure
		*out = new(bool)
		**out = **in
	}
	if in.TLSCert != nil {
		in, out := &in.TLSCert, &out.TLSCert
		*out = new(string)
		**out = **in
	}
	if in.TLSKey != nil {
		in, out := &in.TLSKey, &out.TLSKey
		*out = new(string)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NSQ.
func (in *NSQ) DeepCopy() *NSQ {
	if in == nil {
		return nil
	}
	out := new(NSQ)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Postgres) DeepCopyInto(out *Postgres) {
	*out = *in
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.RetrieveField != nil {
		in, out := &in.RetrieveField, &out.RetrieveField
		*out = new(string)
		**out = **in
	}
	if in.RetrieveQuery != nil {
		in, out := &in.RetrieveQuery, &out.RetrieveQuery
		*out = new(SqlQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.FailureQuery != nil {
		in, out := &in.FailureQuery, &out.FailureQuery
		*out = new(SqlQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.ClearQuery != nil {
		in, out := &in.ClearQuery, &out.ClearQuery
		*out = new(SqlQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetQueryValue != nil {
		in, out := &in.TargetQueryValue, &out.TargetQueryValue
		*out = new(int)
		**out = **in
	}
	if in.ScaleQuery != nil {
		in, out := &in.ScaleQuery, &out.ScaleQuery
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Postgres.
func (in *Postgres) DeepCopy() *Postgres {
	if in == nil {
		return nil
	}
	out := new(Postgres)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProcX) DeepCopyInto(out *ProcX) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProcX.
func (in *ProcX) DeepCopy() *ProcX {
	if in == nil {
		return nil
	}
	out := new(ProcX)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ProcX) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProcXList) DeepCopyInto(out *ProcXList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ProcX, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProcXList.
func (in *ProcXList) DeepCopy() *ProcXList {
	if in == nil {
		return nil
	}
	out := new(ProcXList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ProcXList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProcXSpec) DeepCopyInto(out *ProcXSpec) {
	*out = *in
	if in.ScalerType != nil {
		in, out := &in.ScalerType, &out.ScalerType
		*out = new(ScalerType)
		**out = **in
	}
	if in.ActiveMQ != nil {
		in, out := &in.ActiveMQ, &out.ActiveMQ
		*out = new(ActiveMQ)
		(*in).DeepCopyInto(*out)
	}
	if in.AWSDynamoDB != nil {
		in, out := &in.AWSDynamoDB, &out.AWSDynamoDB
		*out = new(AWSDynamoDB)
		(*in).DeepCopyInto(*out)
	}
	if in.AWSSQS != nil {
		in, out := &in.AWSSQS, &out.AWSSQS
		*out = new(AWSSQS)
		(*in).DeepCopyInto(*out)
	}
	if in.AWSS3 != nil {
		in, out := &in.AWSS3, &out.AWSS3
		*out = new(AWSS3)
		(*in).DeepCopyInto(*out)
	}
	if in.Cassandra != nil {
		in, out := &in.Cassandra, &out.Cassandra
		*out = new(Cassandra)
		(*in).DeepCopyInto(*out)
	}
	if in.Centauri != nil {
		in, out := &in.Centauri, &out.Centauri
		*out = new(Centauri)
		(*in).DeepCopyInto(*out)
	}
	if in.Elasticsearch != nil {
		in, out := &in.Elasticsearch, &out.Elasticsearch
		*out = new(Elasticsearch)
		(*in).DeepCopyInto(*out)
	}
	if in.FS != nil {
		in, out := &in.FS, &out.FS
		*out = new(FS)
		(*in).DeepCopyInto(*out)
	}
	if in.GCPBQ != nil {
		in, out := &in.GCPBQ, &out.GCPBQ
		*out = new(GCPBQ)
		(*in).DeepCopyInto(*out)
	}
	if in.GCPPubSub != nil {
		in, out := &in.GCPPubSub, &out.GCPPubSub
		*out = new(GCPPubSub)
		(*in).DeepCopyInto(*out)
	}
	if in.GCPGCS != nil {
		in, out := &in.GCPGCS, &out.GCPGCS
		*out = new(GCPGCS)
		(*in).DeepCopyInto(*out)
	}
	if in.GCPFirestore != nil {
		in, out := &in.GCPFirestore, &out.GCPFirestore
		*out = new(GCPFirestore)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTP != nil {
		in, out := &in.HTTP, &out.HTTP
		*out = new(HTTP)
		(*in).DeepCopyInto(*out)
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = new(Kafka)
		(*in).DeepCopyInto(*out)
	}
	if in.MongoDB != nil {
		in, out := &in.MongoDB, &out.MongoDB
		*out = new(MongoDB)
		(*in).DeepCopyInto(*out)
	}
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = new(MySQL)
		(*in).DeepCopyInto(*out)
	}
	if in.NATS != nil {
		in, out := &in.NATS, &out.NATS
		*out = new(NATS)
		(*in).DeepCopyInto(*out)
	}
	if in.NFS != nil {
		in, out := &in.NFS, &out.NFS
		*out = new(NFS)
		(*in).DeepCopyInto(*out)
	}
	if in.NSQ != nil {
		in, out := &in.NSQ, &out.NSQ
		*out = new(NSQ)
		(*in).DeepCopyInto(*out)
	}
	if in.Postgres != nil {
		in, out := &in.Postgres, &out.Postgres
		*out = new(Postgres)
		(*in).DeepCopyInto(*out)
	}
	if in.Pulsar != nil {
		in, out := &in.Pulsar, &out.Pulsar
		*out = new(Pulsar)
		(*in).DeepCopyInto(*out)
	}
	if in.RabbitMQ != nil {
		in, out := &in.RabbitMQ, &out.RabbitMQ
		*out = new(RabbitMQ)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisList != nil {
		in, out := &in.RedisList, &out.RedisList
		*out = new(RedisList)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisPubSub != nil {
		in, out := &in.RedisPubSub, &out.RedisPubSub
		*out = new(RedisPubSub)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisStream != nil {
		in, out := &in.RedisStream, &out.RedisStream
		*out = new(RedisStream)
		(*in).DeepCopyInto(*out)
	}
	if in.HostEnv != nil {
		in, out := &in.HostEnv, &out.HostEnv
		*out = new(bool)
		**out = **in
	}
	if in.Daemon != nil {
		in, out := &in.Daemon, &out.Daemon
		*out = new(bool)
		**out = **in
	}
	if in.PassWorkAsArg != nil {
		in, out := &in.PassWorkAsArg, &out.PassWorkAsArg
		*out = new(bool)
		**out = **in
	}
	if in.PassWorkAsStdin != nil {
		in, out := &in.PassWorkAsStdin, &out.PassWorkAsStdin
		*out = new(bool)
		**out = **in
	}
	if in.PayloadFile != nil {
		in, out := &in.PayloadFile, &out.PayloadFile
		*out = new(string)
		**out = **in
	}
	if in.KeepPayloadFile != nil {
		in, out := &in.KeepPayloadFile, &out.KeepPayloadFile
		*out = new(bool)
		**out = **in
	}
	if in.BackoffLimit != nil {
		in, out := &in.BackoffLimit, &out.BackoffLimit
		*out = new(int32)
		**out = **in
	}
	if in.MinReplicaCount != nil {
		in, out := &in.MinReplicaCount, &out.MinReplicaCount
		*out = new(int32)
		**out = **in
	}
	if in.MaxReplicaCount != nil {
		in, out := &in.MaxReplicaCount, &out.MaxReplicaCount
		*out = new(int32)
		**out = **in
	}
	if in.CoolDownPeriod != nil {
		in, out := &in.CoolDownPeriod, &out.CoolDownPeriod
		*out = new(int32)
		**out = **in
	}
	if in.PollingInterval != nil {
		in, out := &in.PollingInterval, &out.PollingInterval
		*out = new(int32)
		**out = **in
	}
	if in.ServiceAccountName != nil {
		in, out := &in.ServiceAccountName, &out.ServiceAccountName
		*out = new(string)
		**out = **in
	}
	if in.CommonLabels != nil {
		in, out := &in.CommonLabels, &out.CommonLabels
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.ImagePullSecrets != nil {
		in, out := &in.ImagePullSecrets, &out.ImagePullSecrets
		*out = new([]v1.LocalObjectReference)
		if **in != nil {
			in, out := *in, *out
			*out = make([]v1.LocalObjectReference, len(*in))
			copy(*out, *in)
		}
	}
	if in.EnvSecretNames != nil {
		in, out := &in.EnvSecretNames, &out.EnvSecretNames
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.VolumeMounts != nil {
		in, out := &in.VolumeMounts, &out.VolumeMounts
		*out = new([]v1.VolumeMount)
		if **in != nil {
			in, out := *in, *out
			*out = make([]v1.VolumeMount, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = new([]v1.Volume)
		if **in != nil {
			in, out := *in, *out
			*out = make([]v1.Volume, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
	if in.PodTemplate != nil {
		in, out := &in.PodTemplate, &out.PodTemplate
		*out = new(v1.PodTemplateSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProcXSpec.
func (in *ProcXSpec) DeepCopy() *ProcXSpec {
	if in == nil {
		return nil
	}
	out := new(ProcXSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProcXStatus) DeepCopyInto(out *ProcXStatus) {
	*out = *in
	if in.Pods != nil {
		in, out := &in.Pods, &out.Pods
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DeployStatus != nil {
		in, out := &in.DeployStatus, &out.DeployStatus
		*out = new(DeployStatus)
		**out = **in
	}
	if in.ScaledObjectStatus != nil {
		in, out := &in.ScaledObjectStatus, &out.ScaledObjectStatus
		*out = new(ScaledObjectStatus)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProcXStatus.
func (in *ProcXStatus) DeepCopy() *ProcXStatus {
	if in == nil {
		return nil
	}
	out := new(ProcXStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Pulsar) DeepCopyInto(out *Pulsar) {
	*out = *in
	if in.Subscription != nil {
		in, out := &in.Subscription, &out.Subscription
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
	if in.TopicsPattern != nil {
		in, out := &in.TopicsPattern, &out.TopicsPattern
		*out = new(string)
		**out = **in
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.AuthToken != nil {
		in, out := &in.AuthToken, &out.AuthToken
		*out = new(string)
		**out = **in
	}
	if in.AuthTokenSecretName != nil {
		in, out := &in.AuthTokenSecretName, &out.AuthTokenSecretName
		*out = new(string)
		**out = **in
	}
	if in.AuthTokenFile != nil {
		in, out := &in.AuthTokenFile, &out.AuthTokenFile
		*out = new(string)
		**out = **in
	}
	if in.AuthCertPath != nil {
		in, out := &in.AuthCertPath, &out.AuthCertPath
		*out = new(string)
		**out = **in
	}
	if in.AuthKeyPath != nil {
		in, out := &in.AuthKeyPath, &out.AuthKeyPath
		*out = new(string)
		**out = **in
	}
	if in.AuthOAuthParams != nil {
		in, out := &in.AuthOAuthParams, &out.AuthOAuthParams
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.TLSTrustCertsFilePath != nil {
		in, out := &in.TLSTrustCertsFilePath, &out.TLSTrustCertsFilePath
		*out = new(string)
		**out = **in
	}
	if in.TLSAllowInsecureConnection != nil {
		in, out := &in.TLSAllowInsecureConnection, &out.TLSAllowInsecureConnection
		*out = new(bool)
		**out = **in
	}
	if in.TLSValidateHostname != nil {
		in, out := &in.TLSValidateHostname, &out.TLSValidateHostname
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pulsar.
func (in *Pulsar) DeepCopy() *Pulsar {
	if in == nil {
		return nil
	}
	out := new(Pulsar)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RabbitMQ) DeepCopyInto(out *RabbitMQ) {
	*out = *in
	if in.URLSecretName != nil {
		in, out := &in.URLSecretName, &out.URLSecretName
		*out = new(string)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RabbitMQ.
func (in *RabbitMQ) DeepCopy() *RabbitMQ {
	if in == nil {
		return nil
	}
	out := new(RabbitMQ)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisList) DeepCopyInto(out *RedisList) {
	*out = *in
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.ListLength != nil {
		in, out := &in.ListLength, &out.ListLength
		*out = new(string)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLSInsecure != nil {
		in, out := &in.TLSInsecure, &out.TLSInsecure
		*out = new(bool)
		**out = **in
	}
	if in.TLSCert != nil {
		in, out := &in.TLSCert, &out.TLSCert
		*out = new(string)
		**out = **in
	}
	if in.TLSKey != nil {
		in, out := &in.TLSKey, &out.TLSKey
		*out = new(string)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisList.
func (in *RedisList) DeepCopy() *RedisList {
	if in == nil {
		return nil
	}
	out := new(RedisList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisPubSub) DeepCopyInto(out *RedisPubSub) {
	*out = *in
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLSInsecure != nil {
		in, out := &in.TLSInsecure, &out.TLSInsecure
		*out = new(bool)
		**out = **in
	}
	if in.TLSCert != nil {
		in, out := &in.TLSCert, &out.TLSCert
		*out = new(string)
		**out = **in
	}
	if in.TLSKey != nil {
		in, out := &in.TLSKey, &out.TLSKey
		*out = new(string)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisPubSub.
func (in *RedisPubSub) DeepCopy() *RedisPubSub {
	if in == nil {
		return nil
	}
	out := new(RedisPubSub)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisStream) DeepCopyInto(out *RedisStream) {
	*out = *in
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretName != nil {
		in, out := &in.PasswordSecretName, &out.PasswordSecretName
		*out = new(string)
		**out = **in
	}
	if in.ConsumerName != nil {
		in, out := &in.ConsumerName, &out.ConsumerName
		*out = new(string)
		**out = **in
	}
	if in.ConsumerGroup != nil {
		in, out := &in.ConsumerGroup, &out.ConsumerGroup
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.ValueKeys != nil {
		in, out := &in.ValueKeys, &out.ValueKeys
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.MessageID != nil {
		in, out := &in.MessageID, &out.MessageID
		*out = new(string)
		**out = **in
	}
	if in.ClearOp != nil {
		in, out := &in.ClearOp, &out.ClearOp
		*out = new(RedisStreamOp)
		**out = **in
	}
	if in.FailOp != nil {
		in, out := &in.FailOp, &out.FailOp
		*out = new(RedisStreamOp)
		**out = **in
	}
	if in.TLSSecretName != nil {
		in, out := &in.TLSSecretName, &out.TLSSecretName
		*out = new(string)
		**out = **in
	}
	if in.EnableTLS != nil {
		in, out := &in.EnableTLS, &out.EnableTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLSInsecure != nil {
		in, out := &in.TLSInsecure, &out.TLSInsecure
		*out = new(bool)
		**out = **in
	}
	if in.TLSCert != nil {
		in, out := &in.TLSCert, &out.TLSCert
		*out = new(string)
		**out = **in
	}
	if in.TLSKey != nil {
		in, out := &in.TLSKey, &out.TLSKey
		*out = new(string)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
	if in.PendingEntriesCount != nil {
		in, out := &in.PendingEntriesCount, &out.PendingEntriesCount
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisStream.
func (in *RedisStream) DeepCopy() *RedisStream {
	if in == nil {
		return nil
	}
	out := new(RedisStream)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetrieveRequest) DeepCopyInto(out *RetrieveRequest) {
	*out = *in
	in.HTTPRequest.DeepCopyInto(&out.HTTPRequest)
	if in.KeyJSONSelector != nil {
		in, out := &in.KeyJSONSelector, &out.KeyJSONSelector
		*out = new(string)
		**out = **in
	}
	if in.WorkJSONSelector != nil {
		in, out := &in.WorkJSONSelector, &out.WorkJSONSelector
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetrieveRequest.
func (in *RetrieveRequest) DeepCopy() *RetrieveRequest {
	if in == nil {
		return nil
	}
	out := new(RetrieveRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScaledObjectStatus) DeepCopyInto(out *ScaledObjectStatus) {
	*out = *in
	if in.LastActiveTime != nil {
		in, out := &in.LastActiveTime, &out.LastActiveTime
		*out = (*in).DeepCopy()
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(map[string]kedav1alpha1.HealthStatus)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]kedav1alpha1.HealthStatus, len(*in))
			for key, val := range *in {
				(*out)[key] = *val.DeepCopy()
			}
		}
	}
	if in.PausedReplicaCount != nil {
		in, out := &in.PausedReplicaCount, &out.PausedReplicaCount
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScaledObjectStatus.
func (in *ScaledObjectStatus) DeepCopy() *ScaledObjectStatus {
	if in == nil {
		return nil
	}
	out := new(ScaledObjectStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlQuery) DeepCopyInto(out *SqlQuery) {
	*out = *in
	if in.Params != nil {
		in, out := &in.Params, &out.Params
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlQuery.
func (in *SqlQuery) DeepCopy() *SqlQuery {
	if in == nil {
		return nil
	}
	out := new(SqlQuery)
	in.DeepCopyInto(out)
	return out
}
